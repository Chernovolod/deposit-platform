{"version":3,"sources":["views/pages/newPassword/NewPasswordView.js","views/pages/newPassword/NewPasswordContainer.js","views/pages/newPassword/index.js"],"names":["NewPasswordView","isLoading","onChange","setNewPasswordHandler","toaster","toast","t","useTranslation","className","autoComplete","type","name","id","placeholder","htmlFor","block","color","variant","disabled","onClick","role","ref","push","placement","NewPasswordContainer","rest","useState","setLoading","formData","setFormData","addToast","useRef","a","urlParams","URLSearchParams","location","search","token","get","setNewPassword","password","wasCreated","showErrorToast","setTimeout","history","message","isError","title","autohide","close","width","height","xmlns","preserveAspectRatio","focusable","fill","propsData","target","value"],"mappings":"4QA2EeA,EA5DS,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,UAAWC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,sBAAuBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACtEC,EAAMC,cAAND,EAMR,OACE,qBAAKE,UAAU,gDAAf,SACE,eAAC,IAAD,WACE,6BACGF,EAAE,yBAEL,+BAAQA,EAAE,4BACV,cAAC,IAAD,UACE,eAAC,IAAD,CAAOE,UAAU,cAAjB,UACE,sBAAKA,UAAU,uBAAf,UACE,eAAC,IAAD,CAAgBA,UAAU,OAA1B,UACE,cAAC,IAAD,CACEC,aAAa,MACbC,KAAK,WACLC,KAAK,WACLC,GAAG,WACHC,YAAaP,EAAE,qBACfJ,SAAUA,IAEZ,cAAC,IAAD,CAAYY,QAAQ,WAApB,SAAgCR,EAAE,0BAEpC,eAAC,IAAD,CAAgBE,UAAU,OAA1B,UACE,cAAC,IAAD,CACEC,aAAa,MACbC,KAAK,WACLC,KAAK,iBACLC,GAAG,iBACHC,YAAaP,EAAE,wBACfJ,SAAUA,IAEZ,cAAC,IAAD,CAAYY,QAAQ,iBAApB,SAAsCR,EAAE,gCAG5C,qBAAKE,UAAU,iEAAf,SACE,cAAC,IAAD,CACEO,MAAM,OACNC,MAAM,UACNC,QAAQ,UACRC,SAAUjB,EACVkB,QAAShB,EACTK,UAAU,gBANZ,SAQGP,EA9Cb,qBAAKO,UAAU,8BAA8BY,KAAK,SAAlD,SACE,sBAAMZ,UAAU,cA6CyBF,EAAE,2BAKzC,cAAC,KAAD,CAAUe,IAAKjB,EAASkB,KAAMjB,EAAOkB,UAAU,kB,SCGxCC,G,OAjEc,SAAC,GAAiB,IAAZC,EAAW,oBACpCnB,EAAMC,cAAND,EACR,EAAgCoB,oBAAS,GAAzC,mBAAOzB,EAAP,KAAkB0B,EAAlB,KACA,EAAgCD,mBAAS,IAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAA0BH,mBAAS,GAAnC,mBAAOrB,EAAP,KAAcyB,EAAd,KACM1B,EAAU2B,mBASV5B,EAAqB,uCAAG,8BAAA6B,EAAA,sEAE1BL,GAAW,GACLM,EAAY,IAAIC,gBAAgBT,EAAKU,SAASC,QAC9CC,EAAQJ,EAAUK,IAAI,SAJF,SAKPC,YAAe,CAACC,SAAUZ,EAASY,SAAUH,UALtC,cAMjBI,aACPX,GAAS,kBAAMY,EAAepC,EAAE,oCAAoC,MACpEqC,YAAW,kBAAMlB,EAAKmB,QAAQtB,KAAK,YAAW,MARtB,kDAW1BQ,GAAS,kBAAMY,OAXW,yBAa1Bf,GAAW,GAbe,6EAAH,qDAgBrBe,EAAiB,eAACG,EAAD,uDAAW,GAAIC,IAAf,gEACrB,eAAC,KAAD,CAAQC,MAAiBzC,EAAVwC,EAAY,oBAAyB,mBAAoBE,UAAU,EAAlF,UACE,eAAC,KAAD,CAAcC,OAAK,EAAnB,UACE,qBACEzC,UAAU,eACV0C,MAAM,KACNC,OAAO,KACPC,MAAM,6BACNC,oBAAoB,iBACpBC,UAAU,QACVlC,KAAK,MAPP,SASE,sBAAM8B,MAAM,OAAOC,OAAO,OAAOI,KAAOT,EAAU,UAAY,cAEhE,wBAAQtC,UAAU,UAAlB,SAAuCF,EAAVwC,EAAY,oBAAyB,eAEpE,cAAC,KAAD,UAAaD,GAAWvC,EAAE,yBAGxBkD,EAAS,2BACV/B,GADU,IAEbvB,SA5Ce,SAAC,GAAiC,IAAD,IAA9BuD,OAAU9C,EAAoB,EAApBA,KAAM+C,EAAc,EAAdA,MAClC7B,EAAY,2BACPD,GADM,kBAERjB,EAAO+C,MA0CVvD,wBACAF,YACAG,UACAC,UAGF,OACE,mCACE,cAAC,EAAD,eAAqBmD,QCjEZhC","file":"static/js/37.297ad98f.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  CButton,\n  CCol,\n  CRow,\n  CListGroupItem,\n  CContainer,\n  CForm,\n  CFormControl,\n  CLink,\n  CToaster,\n  CFormLabel, CFormFloating\n} from '@coreui/react'\nimport { useTranslation } from 'react-i18next'\n\nconst NewPasswordView = ({ isLoading, onChange, setNewPasswordHandler, toaster, toast }) => {\n  const { t } = useTranslation()\n  const renderSpinner = () => (\n    <div className=\"spinner-border text-primary\" role=\"status\">\n      <span className=\"sr-only\"/>\n    </div>\n  )\n  return (\n    <div className=\"min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <h1>\n          {t('resetPassword.title')}\n        </h1>\n        <span>{ t('resetPassword.subtitle') }</span>\n        <CCol>\n          <CForm className=\"flex-column\">\n            <div className=\"col-12 col-md-3 mt-3\">\n              <CFormFloating  className=\"mt-4\">\n                <CFormControl\n                  autoComplete=\"off\"\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"password\"\n                  placeholder={t('resetPassword.new')}\n                  onChange={onChange}\n                />\n                <CFormLabel htmlFor=\"password\">{t('resetPassword.new')}</CFormLabel>\n              </CFormFloating>\n              <CFormFloating  className=\"mt-4\">\n                <CFormControl\n                  autoComplete=\"off\"\n                  type=\"password\"\n                  name=\"repeatPassword\"\n                  id=\"repeatPassword\"\n                  placeholder={t('resetPassword.repeat')}\n                  onChange={onChange}\n                />\n                <CFormLabel htmlFor=\"repeatPassword\">{t('resetPassword.repeat')}</CFormLabel>\n              </CFormFloating>\n            </div>\n            <div className=\"col-12 col-md-3 d-flex flex-column align-items-start mt-7 mb-4\">\n              <CButton\n                block=\"true\"\n                color=\"primary\"\n                variant=\"outline\"\n                disabled={isLoading}\n                onClick={setNewPasswordHandler}\n                className=\"btn-lg col-12\"\n              >\n                {isLoading ? renderSpinner() : t('setNewPassword')}\n              </CButton>\n            </div>\n          </CForm>\n        </CCol>\n        <CToaster ref={toaster} push={toast} placement=\"top-end\" />\n      </CContainer>\n    </div>\n  )\n}\n\nexport default NewPasswordView\n","import React, { useEffect, useRef, useState } from 'react'\nimport NewPasswordView from './NewPasswordView'\nimport { useTranslation } from 'react-i18next'\nimport { CToast, CToastBody, CToastHeader } from '@coreui/react'\nimport { setNewPassword } from 'src/services'\nimport * as url from 'url'\n\nconst NewPasswordContainer = ({ ...rest }) => {\n  const { t } = useTranslation()\n  const [isLoading, setLoading] = useState(false)\n  const [formData, setFormData] = useState({})\n  const [toast, addToast] = useState(0)\n  const toaster = useRef()\n\n  const onChange = ({ target: { name, value } }) => {\n    setFormData({\n      ...formData,\n      [name]: value\n    })\n  }\n\n  const setNewPasswordHandler = async () => {\n    try {\n      setLoading(true)\n      const urlParams = new URLSearchParams(rest.location.search)\n      const token = urlParams.get('token')\n      const data = await setNewPassword({password: formData.password, token})\n      if (data.wasCreated) {\n        addToast(() => showErrorToast(t('toast.modal.changedPasswordText'), false))\n        setTimeout(() => rest.history.push('/login'), 2000)\n      }\n    } catch (e) {\n      addToast(() => showErrorToast())\n    } finally {\n      setLoading(false)\n    }\n  }\n  const showErrorToast = (message = '', isError = true) => (\n    <CToast title={isError ? t('defaultErrorTitle') : t('congratulations')} autohide={true}>\n      <CToastHeader close>\n        <svg\n          className=\"rounded me-2\"\n          width=\"20\"\n          height=\"20\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          preserveAspectRatio=\"xMidYMid slice\"\n          focusable=\"false\"\n          role=\"img\"\n        >\n          <rect width=\"100%\" height=\"100%\" fill={ isError ? '#EB5757' : '#6FCF97' }></rect>\n        </svg>\n        <strong className=\"me-auto\">{isError ? t('defaultErrorTitle') : t('thanks')}</strong>\n      </CToastHeader>\n      <CToastBody>{message || t('default400Error')}</CToastBody>\n    </CToast>\n  )\n  const propsData = {\n    ...rest,\n    onChange,\n    setNewPasswordHandler,\n    isLoading,\n    toaster,\n    toast\n  }\n\n  return (\n    <>\n      <NewPasswordView {...propsData} />\n    </>\n  )\n}\n\nexport default NewPasswordContainer\n","import NewPasswordContainer from './NewPasswordContainer'\n\nexport default NewPasswordContainer\n"],"sourceRoot":""}