{"version":3,"sources":["components/profitabilityCalculator/ProfitabilityCalculatorView.js","components/profitabilityCalculator/ProfitabilityCalculatorContainer.js","components/profitabilityCalculator/index.js"],"names":["RenderRequestModal","isModalVisible","closeRequestModal","t","modalFormData","applyOfferHandler","currentSuggestion","minAmount","currency","id","isLoading","onModalChange","valid","onClick","alignment","visible","onDismiss","className","component","xl","invalid","aria-describedby","autoComplete","type","min","name","value","amount","placeholder","onChange","disabled","size","color","classes","SingleBankResponse","percentage","days","onClickHandler","xs","role","data-id","ProfitabilityCalculatorView","suggestions","sum","calculateProfit","openRequestModal","toast","toaster","col","aria-label","classnames","Number","length","map","el","ref","push","placement","connect","isApprovalModalShown","user","dispatch","setVisible","isShown","setApprovalModalVisibility","rest","useTranslation","useState","setSuggestions","setLoading","useRef","addToast","setIsModalVisible","maxAmount","setCurrentSuggestion","setValid","summary","setSummary","formData","setFormData","setModalFormData","a","status","Math","round","getSuggestions","getCalculatorSuggestions","data","message","applyOffer","depositId","showErrorToast","isError","title","autohide","close","width","height","xmlns","preserveAspectRatio","focusable","fill","propsData","target","dataset","filter","request","currentRequest","ProfitabilityCalculatorContainer"],"mappings":"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","file":"static/js/31.96d6d7d8.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CForm,\n  CFormControl,\n  CFormSelect,\n  CFormText,\n  CRow,\n  CLink,\n  CListGroupItem,\n  CModalHeader,\n  CModalContent,\n  CModal,\n  CModalTitle,\n  CModalBody,\n  CModalFooter,\n  CToaster,\n} from '@coreui/react'\nimport Loader from '../../views/components/loaders/intermittent'\nimport classnames from 'classnames'\nimport RegularLoader from 'src/views/components/loaders/regular'\n\nconst RenderRequestModal = ({ isModalVisible, closeRequestModal, t, modalFormData, applyOfferHandler, currentSuggestion :{ minAmount, currency, id }, isLoading, onModalChange, onClick, valid }) => (\n  <CModal alignment=\"center\" visible={ isModalVisible } onDismiss={ closeRequestModal }>\n    <CModalContent className=\"pb-4 px-3\">\n      <CModalHeader onDismiss={ closeRequestModal }>\n        <CModalTitle component=\"h2\">{ t('requests.modal.title.apply') }</CModalTitle>\n      </CModalHeader>\n      <CModalBody className=\"mb-7\">\n        <CForm>\n          <CRow className=\"mt-4\">\n            <CCol xl={ 9 }>\n              <CFormText component=\"span\"\n                         id=\"amount\">{ `${ t('requests.modal.content.text') } ${ currency }` }</CFormText>\n              <CFormControl\n                valid={ valid }\n                invalid={ !valid }\n                aria-describedby=\"amount\"\n                autoComplete=\"off\"\n                type=\"number\"\n                min={ minAmount }\n                name=\"amount\"\n                id=\"amount\"\n                value={ modalFormData.amount }\n                placeholder={ minAmount }\n                onChange={ onModalChange }\n              />\n            </CCol>\n          </CRow>\n        </CForm>\n      </CModalBody>\n      <CModalFooter className=\"justify-content-start\">\n        <CButton onClick={ ()=> applyOfferHandler(modalFormData, id) }\n                 disabled={ isLoading || !valid }\n                 className=\"text-white py-2\" size=\"sm\"\n                 color=\"primary\">\n          { isLoading\n            ? <RegularLoader classes=\"text-white\"/>\n            : t('requests.modal.footer.button.send') }\n        </CButton>\n      </CModalFooter>\n    </CModalContent>\n  </CModal>\n)\n\nconst SingleBankResponse = ({ t, id, name, currency, percentage, days, type, minAmount, onClickHandler }) => (\n  <CListGroupItem className=\"employees py-4 px-3\" key={ id }>\n    <CRow className=\"m-0 align-items-stretch \">\n      <CCol className=\"p-0 mb-3 mb-md-0\" xs={ 6 } xl={ 2 }>\n        <small className=\"text-muted\">{t('bank')}</small>\n        <h6 className=\"d-block\">{ `${ name }` }</h6>\n      </CCol>\n      <CCol className=\"p-0 mb-3 mb-md-0 text-end text-md-start\" xs={ 6 } xl={ 2 }>\n        <small className=\"text-muted\">{ t('requests.create.form.percentage') }</small>\n        <span className=\"d-block\">{ `${ percentage } %` }</span>\n      </CCol>\n      <CCol className=\"p-0 mb-3 mb-md-0\" xs={ 6 } xl={ 2 }>\n        <small className=\"text-muted\">{ t('requests.create.form.days') }</small>\n        <span className=\"d-block\">{ t(`requests.days.${ days }`) }</span>\n      </CCol>\n      <CCol className=\"p-0 mb-3 mb-md-0 text-end text-md-start\" xs={ 6 } xl={ 2 }>\n        <small className=\"text-muted\">{ t('requests.create.form.type') }</small>\n        <span className=\"d-block\">{ t(`requests.${ type }`) }</span>\n      </CCol>\n      <CCol className=\"p-0 mb-3 mb-md-0\" xs={ 6 } xl={ 2 }>\n        <small className=\"text-muted\">{ t('requests.create.form.minimalAmount') }</small>\n        <span className=\"m-0 d-block\">{ `${ minAmount } ${ currency }` }</span>\n      </CCol>\n      <CCol xs={ 6 } xl={ 2 } className=\" p-0 d-flex align-self-center justify-content-end\">\n        <CLink\n          role=\"button\"\n          data-id={ id }\n          onClick={ onClickHandler }\n          className=\"text-primary text-end text-md-start fw-bold\"\n        >\n          {t('requests.bank.profitAbillity.SingleBankResponse.link')}\n        </CLink>\n      </CCol>\n    </CRow>\n  </CListGroupItem>\n)\n\nconst ProfitabilityCalculatorView = ({\n                                       suggestions,\n                                       isLoading,\n                                       amount,\n                                       currency,\n                                       percentage,\n                                       days,\n                                       sum,\n                                       calculateProfit,\n                                       onChange,\n                                       isModalVisible, \n                                       openRequestModal,\n                                       valid,\n                                       modalFormData,\n                                       onModalChange,\n                                       currentSuggestion,\n                                       applyOfferHandler,\n                                       closeRequestModal,\n                                       toast,\n                                       t,\n                                       toaster,\n                                       ...rest\n                                     }) => {\n  return (\n    <>\n      <CRow xl={ { col: 2 } }>\n        <CCol xl={ 6 }>\n          <CCard>\n            <CCardBody className=\"py-4 pe-3\">\n              <CForm className=\"row\">\n                <CCol xs={8} xl={ 4 }>\n                  <CFormText component=\"span\" id=\"amount\">{ t('requests.create.form.amount') }</CFormText>\n                  <CFormControl\n                    aria-describedby=\"amount\"\n                    autoComplete=\"off\"\n                    type=\"number\"\n                    name=\"amount\"\n                    id=\"amount\"\n                    placeholder=\"0\"\n                    onChange={ onChange }\n                  />\n                </CCol>\n                <CCol xs={4} xl={ 2 }>\n                  <CFormText component=\"span\" id=\"currency\">{ t('requests.create.form.currency') }</CFormText>\n                  <CFormSelect name=\"currency\"\n                               onChange={ onChange }\n                               aria-describedby=\"currency\" aria-label={ t('requests.create.form.currency') }>\n                    <option value=\"BYN\">{t('BYN')}</option>\n                    <option value=\"USD\">{t('USD')}</option>\n                    <option value=\"EUR\">{t('EUR')}</option>\n                    <option value=\"RUB\">{t('RUB')}</option>\n                  </CFormSelect>\n                </CCol>\n                <CCol xs={4} xl={ 2 } className=\"amount-container\">\n                  <CFormText component=\"span\" id=\"percentage\">{ t('requests.create.form.percentage') }</CFormText>\n                  <CFormControl\n                    aria-describedby=\"percentage\"\n                    autoComplete=\"off\"\n                    type=\"number\"\n                    name=\"percentage\"\n                    id=\"percentage\"\n                    // placeholder=\"%\"\n                    onChange={ onChange }\n                  />\n                </CCol>\n                <CCol xs={8} xl={ 4 }>\n                  <CFormText component=\"span\" id=\"days\">{ t('requests.create.form.days') }</CFormText>\n                  <CFormSelect name=\"days\"\n                               onChange={ onChange }\n                               aria-describedby=\"days\" aria-label={ t('requests.create.form.days') }>\n                    <option value=\"90\">{t('requests.bank.profitAbillity.form.select.1.days.90')}</option>\n                    <option value=\"180\">{t('requests.bank.profitAbillity.form.select.1.days.180')}</option>\n                    <option value=\"365\">{t('requests.bank.profitAbillity.form.select.1.days.365')}</option>\n                    <option value=\"1095\">{t('requests.bank.profitAbillity.form.select.1.days.1095')}</option>\n                  </CFormSelect>\n                </CCol>\n              </CForm>\n              <CButton\n                onClick={ calculateProfit }\n                size=\"sm\"\n                color=\"primary\"\n                className=\"px-5 col-12 col-md-6 py-2 mt-5 text-white d-block ms-auto\"\n              >\n                { t('requests.calculator.submit') }\n              </CButton>\n            </CCardBody>\n          </CCard>\n        </CCol>\n        <CCol xl={ 6 }>\n          <CCard className=\"h-100\">\n            <CCardBody className={ classnames('py-4 pe-5 d-flex flex-column', {\n              'justify-content-center': isLoading,\n              'justify-content-between': !isLoading\n            }) }>\n              { isLoading && <Loader/> }\n              { !isLoading &&\n              <>\n                <h6>{ t('requests.calculator.result.title') }</h6>\n                <CRow className=\"align-items-stretch m-0\">\n                  <CCol className=\"p-0\" xs={ 6 } xl={ 4 }>\n                    <small className=\"text-muted\">{ t('requests.create.form.amount') }</small>\n                    <span className=\"d-block\">{ `${ amount } ${ currency }` }</span>\n                  </CCol>\n                  <CCol className=\"p-0\" xs={ 6 } xl={ 2 }>\n                    <small className=\"text-muted\">{ t('requests.create.form.percentage') }</small>\n                    <span className=\"d-block\">{ percentage } %</span>\n                  </CCol>\n                  <CCol className=\"p-0\" xs={ 6 } xl={ 3 }>\n                    <small className=\"text-muted\">{ t('requests.create.form.days') }</small>\n                    <span className=\"d-block\">{ t(`requests.days.${ days }`) }</span>\n                  </CCol>\n                  <CCol className=\"p-0\" xs={ 6 } xl={ 3 }>\n                    <small className=\"text-muted\">{t('requests.create.form.accruals')}</small>\n                    <span className=\"d-block\">{ `${ sum } ${ currency }` }</span>\n                  </CCol>\n                </CRow>\n                <CRow className=\"m-0\">\n                  <CCol className=\"p-0\" xs={ 12 } xl={ 4 }>\n                    <small className=\"text-muted\">{t('requests.create.form.totalAmount')}</small>\n                    <h6 className=\"m-0\">{ `${ Number(amount) + Number(sum) } ${ currency }` }</h6>\n                  </CCol>\n                </CRow>\n              </>\n              }\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      { suggestions.length\n        ? (<>\n            { isLoading && <Loader classes=\"mt-5\"/> }\n            { !isLoading && (\n              <>\n              <h2 className=\"mt-5\">{ t('requests.calculator.offers.title') }</h2>\n                {suggestions.map(el => <SingleBankResponse onClickHandler={openRequestModal} t={ t } { ...el } />)}\n                { isModalVisible &&  <RenderRequestModal onModalChange={onModalChange}\n                                                         modalFormData={modalFormData}\n                                                         applyOfferHandler={applyOfferHandler}\n                                                         t={t}\n                                                         valid={valid}\n                                                         closeRequestModal={closeRequestModal}\n                                                         currentSuggestion={currentSuggestion}\n                                                         isModalVisible={isModalVisible}\n                /> }\n                </>\n            )}</>\n        )\n        : null }\n      <CToaster ref={toaster} push={toast} placement=\"top-end\" />\n    </>\n  )\n}\n\nexport default ProfitabilityCalculatorView\n","import React, { useState, useRef } from 'react'\nimport {\n  CToast,\n  CToastHeader,\n  CToastBody\n} from '@coreui/react'\nimport ProfitabilityCalculatorView from './ProfitabilityCalculatorView'\nimport { useTranslation } from 'react-i18next'\nimport { getCalculatorSuggestions } from 'src/services'\nimport { setApprovalModalVisibility } from 'src/store'\nimport { connect } from 'react-redux'\nimport RequestAccountApprovalModal from '../requestAccountApprovalModal'\nimport { applyOffer } from 'src/services'\n\nconst ProfitabilityCalculatorContainer = ({ user, setVisible, isApprovalModalShown, ...rest }) => {\n  const { t } = useTranslation()\n  const [suggestions, setSuggestions] = useState([])\n  const [isLoading, setLoading] = useState(false)\n  const toaster = useRef()\n  const [toast, addToast] = useState(0)\n  const [isModalVisible, setIsModalVisible] = useState(false)\n  const [currentSuggestion, setCurrentSuggestion] = useState({\n    id: '', \n    name: '', \n    currency: '', \n    percentage: '', \n    minAmount: '', \n    maxAmount: '', \n    type: '', \n    days: '',\n  })\n  const [valid, setValid] = useState(true)\n  const [summary, setSummary] = useState({\n    amount: 0,\n    currency: 'BYN',\n    percentage: 0,\n    days: 90,\n    sum: 0\n  })\n  const [formData, setFormData] = useState({\n    amount: 0,\n    currency: 'BYN',\n    percentage: 0,\n    days: 90\n  })\n  const onChange = ({ target: { name, value } }) => {\n    setFormData({\n      ...formData,\n      [name]: value\n    })\n  }\n  const [modalFormData, setModalFormData] = useState({\n    amount: null\n  })\n  const onModalChange = ({ target: { name, value } }) => {\n    const { minAmount, maxAmount } = currentSuggestion\n    if ((Number(value) < minAmount && Number(value) !== minAmount) || (Number(value) > maxAmount && Number(value) !== maxAmount)) {\n      setValid(false)\n    } else {\n      setValid(true)\n    }\n    setModalFormData({\n      ...modalFormData,\n      [name]: value\n    })\n  }\n  const calculateProfit = async () => {\n    if (user.type !== 'BANK_ADMIN' && user.status !== 'VERIFIED') {\n      setVisible(true)\n      return\n    }\n    try {\n      setLoading(true)\n      const { amount, percentage, days, currency } = formData\n      const sum = Math.round(Number(amount) * Number(percentage) * Number(days) / 365 / 100)\n      setSummary({\n        currency,\n        amount,\n        percentage,\n        days,\n        sum\n      })\n      await getSuggestions()\n    } catch (e) {\n\n    } finally {\n      setLoading(false)\n    }\n  }\n  const getSuggestions = async () => {\n    try {\n      const data = await getCalculatorSuggestions()\n      if (!data.message) {\n        setSuggestions(data)\n      }\n    } catch (e) {\n\n    } finally {\n\n    }\n  }\n  const closeRequestModal = () => {\n    setIsModalVisible(false)\n    setValid(true)\n  }\n  const openRequestModal = ({ target: { dataset: { id } } }) => {\n    const [currentRequest] = suggestions.filter(request => request.id === id)\n    setModalFormData({\n      amount: currentRequest.minAmount\n    })\n    setCurrentSuggestion(currentRequest)\n    setIsModalVisible(true)\n  }\n  const applyOfferHandler = async (data, id) => {\n    try {\n      const response = await applyOffer({ ...data, depositId: id })\n      if (!response.message) {\n        addToast(() => showErrorToast('Заявка успешно отправлена!', false))\n      } else {\n        addToast(() => showErrorToast())\n      }\n    } catch (err) {\n      addToast(() => showErrorToast())\n    } finally {\n      setIsModalVisible(false)\n    }\n  }\n  const showErrorToast = (message = '', isError = true) => (\n    <CToast title={isError ? t('defaultErrorTitle') : t('congratulations')} autohide={true}>\n      <CToastHeader close>\n        <svg\n          className=\"rounded me-2\"\n          width=\"20\"\n          height=\"20\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          preserveAspectRatio=\"xMidYMid slice\"\n          focusable=\"false\"\n          role=\"img\"\n        >\n          <rect width=\"100%\" height=\"100%\" fill={ isError ? '#EB5757' : '#6FCF97' }></rect>\n        </svg>\n        <strong className=\"me-auto\">{isError ? t('defaultErrorTitle') : t('congratulations')}</strong>\n      </CToastHeader>\n      <CToastBody>{message || t('default400Error')}</CToastBody>\n    </CToast>\n  )\n  const { amount, percentage, days, currency, sum } = summary\n  const propsData = {\n    suggestions,\n    isLoading,\n    amount,\n    currency,\n    percentage,\n    days,\n    sum,\n    onChange,\n    calculateProfit,\n    getSuggestions,\n    isModalVisible, \n    setIsModalVisible,\n    openRequestModal,\n    modalFormData,\n    valid,\n    onModalChange,\n    currentSuggestion,\n    applyOfferHandler,\n    t,\n    toast,\n    closeRequestModal,\n    toaster,\n    ...rest\n  }\n  return (\n    <>\n      <RequestAccountApprovalModal />\n      <ProfitabilityCalculatorView { ...propsData } />\n    </>\n  )\n}\n\nconst mapStateToProps = ({isApprovalModalShown, user}) => ({\n  isApprovalModalShown,\n  user\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setVisible: isShown => dispatch(setApprovalModalVisibility(isShown)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfitabilityCalculatorContainer)\n","import ProfitabilityCalculatorContainer from './ProfitabilityCalculatorContainer'\n\nexport default ProfitabilityCalculatorContainer\n"],"sourceRoot":""}