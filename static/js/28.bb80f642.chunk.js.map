{"version":3,"sources":["views/faq/Faq.js","views/components/titles/pageTitle/PageTitle.js"],"names":["BUSINESS_QUESTIONS","BANK_QUESTIONS","connect","user","t","useTranslation","useState","visible","setVisible","email","valid","setValid","isLoading","setLoading","phone","name","message","formData","setFormData","toast","addToast","toaster","useRef","showErrorToast","isError","title","autohide","close","className","width","height","xmlns","preserveAspectRatio","focusable","role","fill","onChange","target","value","isEmailValid","test","String","toLowerCase","onSubmit","a","sendQuestion","data","QUESTIONS","type","activeKey","setActiveKey","withPrimaryButton","primaryButtonLabel","onPrimaryButtonClick","map","questionNumer","collapsed","onClick","alignment","onDismiss","component","autoComplete","id","placeholder","htmlFor","xl","invalid","rows","resize","disabled","size","color","classes","ref","push","placement","ProfileTitle","withSecondaryButton","secondaryButtonLabel","onSecondaryButtonClick","xs","md","classnames","variant"],"mappings":"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","file":"static/js/28.bb80f642.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\nimport {\n  CAccordion,\n  CAccordionItem,\n  CAccordionButton,\n  CAccordionHeader,\n  CAccordionCollapse,\n  CAccordionBody,\n  CFormLabel,\n  CFormFloating,\n  CFormControl,\n  CModal,\n  CModalContent,\n  CModalBody,\n  CModalHeader,\n  CModalFooter,\n  CModalTitle,\n  CCol,\n  CRow,\n  CButton, CToast, CToastHeader, CToastBody, CToaster\n} from '@coreui/react'\nimport { sendQuestion } from 'src/services'\nimport { PageTitle } from '../components/titles/pageTitle'\nimport RegularLoader from '../components/loaders/regular'\nimport { Helmet } from 'react-helmet'\n\nconst BUSINESS_QUESTIONS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconst BANK_QUESTIONS = [1, 2, 3, 4, 5]\n\nconst Faq = ({ user }) => {\n  const { t } = useTranslation()\n  const [visible, setVisible] = useState(false)\n  const [valid, setValid] = useState(!!user?.email)\n  const [isLoading, setLoading] = useState(false)\n  const [formData, setFormData] = useState({\n    email: user.email,\n    phone: user.phone,\n    name: '',\n    message: ''\n  })\n  const [toast, addToast] = useState(0)\n  const toaster = useRef()\n  const showErrorToast = (message = '', isError = true) => (\n    <CToast title={isError ? t('defaultErrorTitle') : t('congratulations')} autohide={true}>\n      <CToastHeader close>\n        <svg\n          className=\"rounded me-2\"\n          width=\"20\"\n          height=\"20\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          preserveAspectRatio=\"xMidYMid slice\"\n          focusable=\"false\"\n          role=\"img\"\n        >\n          <rect width=\"100%\" height=\"100%\" fill={ isError ? '#EB5757' : '#6FCF97' }></rect>\n        </svg>\n        <strong className=\"me-auto\">{isError ? t('defaultErrorTitle') : t('congratulations')}</strong>\n      </CToastHeader>\n      <CToastBody>{message || t('default400Error')}</CToastBody>\n    </CToast>\n  )\n  const onChange = ({ target: {name, value}}) => {\n    if (name === 'email') {\n      const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      const isEmailValid = re.test(String(value).toLowerCase())\n      if (isEmailValid) {\n        setValid(true)\n      } else setValid(false)\n    }\n    setFormData({\n      ...formData,\n      [name]: value\n    })\n  }\n  const onSubmit = async () => {\n    try {\n      setLoading(true)\n      const data = await sendQuestion(formData)\n      if (!data.message) {\n        addToast(() => showErrorToast(t('toast.modal.send.question.successText'), false))\n        setVisible(false)\n        setFormData({\n          email: '',\n          phone: '',\n          name: '',\n          message: ''\n        })\n      }\n      if (data.message) {\n        addToast(() => showErrorToast(data.message))\n      }\n    } catch (e) {\n      addToast(() => showErrorToast())\n    } finally {\n      setLoading(false)\n    }\n  }\n  const QUESTIONS = user.type === 'BUSINESS_ADMIN' ? BUSINESS_QUESTIONS : BANK_QUESTIONS\n  const [activeKey, setActiveKey] = useState(0)\n  const renderContent = () => (\n    <CAccordion>\n      {QUESTIONS.map(questionNumer => (\n        <CAccordionItem key={questionNumer} className=\"mb-3 rounded-xl\">\n          <h4>\n            <CAccordionButton\n              className={activeKey === questionNumer ? 'rounded-top-xl' : 'rounded-xl'}\n              collapsed={activeKey !== questionNumer}\n              onClick={() =>\n                activeKey === questionNumer ? setActiveKey(0) : setActiveKey(questionNumer)\n              }\n            >\n              {t(`faq.${user.type}.accordion.${questionNumer}.title`)}\n            </CAccordionButton>\n          </h4>\n          <CAccordionCollapse visible={activeKey === questionNumer}>\n            <CAccordionBody>\n              {t(`faq.${user.type}.accordion.${questionNumer}.description`)}\n            </CAccordionBody>\n          </CAccordionCollapse>\n        </CAccordionItem>\n      ))}\n    </CAccordion>\n  )\n  const renderEditModal = () => (\n    <CModal alignment=\"center\" visible={visible} onDismiss={() => setVisible(false)}>\n      <CModalContent className=\"pb-4 px-3\">\n        <CModalHeader onDismiss={() => setVisible(false)}>\n          <CModalTitle component=\"h2\">{t('faq.modal.title')}</CModalTitle>\n        </CModalHeader>\n        <CModalBody className=\"mb-7\">\n          <CFormFloating>\n            <CFormControl\n              autoComplete=\"off\"\n              type=\"text\"\n              name=\"name\"\n              id=\"name\"\n              placeholder={t('faq.modal.input.name')}\n              onChange={onChange}\n            />\n            <CFormLabel htmlFor=\"name\">{t('faq.modal.input.name')}</CFormLabel>\n          </CFormFloating>\n          <CRow className=\"mb-4\">\n            <CCol className=\"mt-4\" xl={6}>\n              <CFormFloating>\n                <CFormControl\n                  valid={valid}\n                  invalid={!valid}\n                  autoComplete=\"off\"\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"email\"\n                  value={formData.email}\n                  placeholder={t('email')}\n                  onChange={onChange}\n                />\n                <CFormLabel htmlFor=\"email\">{t('email')}</CFormLabel>\n              </CFormFloating>\n            </CCol>\n            <CCol className=\"mt-4\" xl={6}>\n              <CFormFloating>\n                <CFormControl\n                  autoComplete=\"off\"\n                  type=\"phone\"\n                  name=\"phone\"\n                  id=\"phone\"\n                  value={formData.phone}\n                  placeholder={t('phoneNumber')}\n                  onChange={onChange}\n                />\n                <CFormLabel htmlFor=\"phone\">{t('phoneNumber')}</CFormLabel>\n              </CFormFloating>\n            </CCol>\n          </CRow>\n          <CFormControl\n            component=\"textarea\"\n            rows=\"3\"\n            resize=\"none\"\n            autoComplete=\"off\"\n            name=\"message\"\n            id=\"message\"\n            placeholder={t('faq.modal.input.question')}\n            onChange={onChange}\n          />\n        </CModalBody>\n        <CModalFooter className=\"d-flex justify-content-start\">\n          <CButton onClick={onSubmit} disabled={isLoading || !valid} className=\"text-white py-2\" size=\"sm\" color=\"primary\" >\n            {isLoading ? <RegularLoader classes=\"text-white\" /> : t('faq.modal.primaryButton')}\n          </CButton>\n        </CModalFooter>\n      </CModalContent>\n    </CModal>\n  )\n\n  return (\n    <>\n      <Helmet>\n        <title>Вопросы и ответы | Deposit Platform</title>\n      </Helmet>\n      <PageTitle\n        title={t('faq.title')}\n        withPrimaryButton\n        primaryButtonLabel={t('faq.primaryButtonLabel')}\n        onPrimaryButtonClick={() => setVisible(!visible)}\n      />\n      {renderContent()}\n      {renderEditModal()}\n      <CToaster ref={toaster} push={toast} placement=\"top-end\" />\n    </>\n  )\n}\n\nconst mapStateToProps = ({ user }) => ({\n  user\n})\n\nexport default connect(mapStateToProps, null)(Faq)\n","import React from 'react'\nimport {\n\tCCol,\n\tCButton\n} from '@coreui/react'\nimport classnames from 'classnames'\n\nconst ProfileTitle = ({\n\ttitle,\n\twithPrimaryButton,\n\twithSecondaryButton,\n\tprimaryButtonLabel,\n\tsecondaryButtonLabel,\n\tonPrimaryButtonClick,\n\tonSecondaryButtonClick\n}) => (\n\t<CCol xl={ 12 } className=\"mb-3 d-flex flex-column flex-md-row justify-content-between\">\n\t\t<h2>{title}</h2>\n\t\t<CCol className=\"d-flex flex-wrap flex-md-nowrap justify-content-md-end\" xs={ 12 } md={ 6 } >\n\t\t\t{\n\t\t\t\twithSecondaryButton &&\n\t\t\t\t<CButton onClick={onSecondaryButtonClick} size=\"sm\" className={ classnames('mb-3 mb-md-0 col-12 col-md-6 py-2', { 'me-0 me-md-3': withPrimaryButton }) } color=\"primary\" variant=\"outline\">\n\t\t\t\t\t{secondaryButtonLabel}\n\t\t\t\t</CButton>\n\t\t\t}\n\t\t\t{\n\t\t\t\twithPrimaryButton &&\n\t\t\t\t<CButton onClick={onPrimaryButtonClick} size=\"sm\" className=\"text-white col-12 col-md-6 py-2\" color=\"primary\">\n\t\t\t\t\t{primaryButtonLabel}\n\t\t\t\t</CButton>\n\t\t\t}\n\t\t</CCol>\n\t</CCol>\n)\n\nexport default ProfileTitle\n"],"sourceRoot":""}