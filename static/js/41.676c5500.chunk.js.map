{"version":3,"sources":["views/pages/register/RegisterView.js","views/pages/register/RegisterContainer.js","views/pages/register/index.js"],"names":["AUTOSUGGEST_THEME","container","containerOpen","input","inputOpen","inputFocused","suggestionsList","suggestion","suggestionFirst","suggestionHighlighted","sectionContainer","sectionContainerFirst","sectionTitle","RegisterView","getSuggestionValue","onSuggestionsFetchRequested","suggestions","onSuggestionSelected","registrationMode","setRegistrationMode","sendRequest","goBack","onChange","isLoading","toaster","toast","formData","validation","isRegistrationCompleted","history","t","useTranslation","renderSuggestion","name","renderSuggestionsContainer","containerProps","children","ref","restContainerProps","isolatedScroll","component","renderAutosuggestInputComponent","inputProps","htmlFor","onSuggestionsClearRequested","renderNewAccountModeInputs","className","value","company","type","id","placeholder","email","valid","newAccount","invalid","Boolean","renderExistingCompanyRegistrationModeInputs","theme","renderInputComponent","length","existingCompany","autoComplete","lastName","firstName","middleName","initialRegistrationMode","newAccountRegistrationMode","existingCompanyRegistrationMode","style","width","height","role","classnames","lg","checked","checkedAgreement","label","Trans","defaults","values","conditions","privacyPolicy","components","l","target","rel","color","block","disabled","isValid","isEmpty","data-registration-mode","onClick","uuidv4","variant","push","placement","INITIAL_FORM_DATA","INITIAL_VALIDATION_STATE","connect","isLoggedIn","rest","useState","companiesList","setCompaniesList","setSuggestionsList","setCompletedRegistration","setValidation","setLoading","addToast","useRef","toggleRegistrationMode","setFormData","dispatch","useDispatch","useEffect","a","getAllCompanies","companies","connectToExistingCompanyHandler","requestData","companyId","filter","linkUserToExistingCompany","token","message","showErrorToast","registerNewBusinessCompanyHandler","registerNewBusinessCompany","res","setTimeout","register","console","log","validateForm","isEmailValid","test","String","toLowerCase","trim","title","autohide","close","xmlns","preserveAspectRatio","focusable","fill","propsData","event","suggestionValue","suggestionIndex","sectionIndex","method","inputValue","inputLength","slice","getSuggestions","dataset","Helmet","content","to","RegisterContainer"],"mappings":"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","file":"static/js/41.676c5500.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  CButton,\n  CCol,\n  CContainer,\n  CForm,\n  CFormCheck,\n  CFormControl,\n  CRow,\n  CLink,\n  CFormFloating,\n  CFormLabel,\n  CToaster, CFormText\n} from '@coreui/react'\nimport { useTranslation } from 'react-i18next'\nimport { Trans } from 'react-i18next'\nimport classnames from 'classnames'\nimport { v4 as uuidv4 } from 'uuid'\nimport { isEmpty } from 'src/utils'\nimport Autosuggest from 'react-autosuggest'\nimport IsolatedScroll from \"react-isolated-scroll\";\n\nconst AUTOSUGGEST_THEME = {\n  container: '',\n  containerOpen: '',\n  input: '',\n  inputOpen: '',\n  inputFocused: '',\n  // suggestionsContainer:     '',\n  // suggestionsContainerOpen: '',\n  suggestionsList: 'list-group',\n  suggestion: 'list-group-item list-group-item-action',\n  suggestionFirst: '',\n  suggestionHighlighted: '',\n  sectionContainer: 'react-autosuggest__section-container',\n  sectionContainerFirst: 'react-autosuggest__section-container--first',\n  sectionTitle: 'react-autosuggest__section-title'\n}\nconst RegisterView = ({\n                        getSuggestionValue,\n                        onSuggestionsFetchRequested,\n                        suggestions,\n                        onSuggestionSelected,\n                        registrationMode,\n                        setRegistrationMode,\n                        sendRequest,\n                        goBack,\n                        onChange,\n                        isLoading,\n                        toaster,\n                        toast,\n                        formData,\n                        validation,\n                        isRegistrationCompleted,\n                        history\n                      }) => {\n  const { t } = useTranslation()\n  const setHeading = () => t(`register.${ registrationMode }.title`)\n  const setDescription = () => t(`register.${ registrationMode }.description`)\n  const setPrimaryButtonContent = () => t(`register.${ registrationMode }.button`)\n  const setSecondaryButtonContent = () => t(registrationMode === 'initial' ? 'register.joinCompany' : 'goBack')\n  const renderSuggestion = ({ name }) => (name)\n  const renderSuggestionsContainer = ({ containerProps, children }) => {\n    const { ref, ...restContainerProps } = containerProps;\n    const callRef = isolatedScroll => {\n      if (isolatedScroll !== null) {\n        ref(isolatedScroll.component);\n      }\n    };\n\n    return (\n      <IsolatedScroll ref={ callRef } { ...restContainerProps }>\n        { children }\n      </IsolatedScroll>\n    );\n  }\n  const renderAutosuggestInputComponent = (inputProps) => (\n    <div>\n      <CFormFloating>\n        <CFormControl\n          { ...inputProps }\n        />\n        <CFormLabel htmlFor=\"company\">{ t('companyName') }</CFormLabel>\n      </CFormFloating>\n    </div>\n  )\n  const onSuggestionsClearRequested = () => {\n  }\n  // const renderSuggestionsContaine = ({ containerProps, children, query }) => (\n  //   <CListGroup {...containerProps}>\n  //     {children}\n  //   </CListGroup>\n  // )\n  const renderNewAccountModeInputs = () => (\n    <CRow className=\"mt-3\">\n      <div className=\"px-0 col-12 col-md-3\">\n        <CFormFloating>\n          <CFormControl\n            value={ formData[registrationMode].company || '' }\n            type=\"text\"\n            name=\"company\"\n            id=\"company\"\n            placeholder={ t('companyName') }\n            onChange={ onChange }\n          />\n          <CFormLabel htmlFor=\"company\">{ t('companyName') }</CFormLabel>\n        </CFormFloating>\n      </div>\n      <div className=\"px-0 my-3 my-md-0 mx-md-4 col-12 col-md-3\">\n        <CFormFloating>\n          <CFormControl\n            value={ formData[registrationMode].email || '' }\n            valid={ formData.newAccount?.email && validation.newAccount?.email }\n            invalid={ Boolean(formData.newAccount?.email && !validation.newAccount?.email) }\n            type=\"email\"\n            name=\"email\"\n            id=\"email\"\n            placeholder={ t('email') }\n            onChange={ onChange }\n          />\n          {\n            Boolean(formData.newAccount?.email && !validation.newAccount?.email) &&\n            <CFormText className=\"text-danger\">{t('landing.registration.errorEmailText')}</CFormText>\n          }\n          <CFormLabel htmlFor=\"email\">{ t('email') }</CFormLabel>\n        </CFormFloating>\n      </div>\n    </CRow>\n  )\n  const renderExistingCompanyRegistrationModeInputs = () => (\n    <CRow>\n      <CRow>\n        <div className=\"px-0 col-12 col-md-3\">\n          <Autosuggest\n            id=\"autosuggest\"\n            theme={ AUTOSUGGEST_THEME }\n            suggestions={ suggestions }\n            onSuggestionsFetchRequested={ onSuggestionsFetchRequested }\n            onSuggestionsClearRequested={ onSuggestionsClearRequested }\n            getSuggestionValue={ getSuggestionValue }\n            renderSuggestion={ renderSuggestion }\n            renderInputComponent={ renderAutosuggestInputComponent }\n            renderSuggestionsContainer={ renderSuggestionsContainer }\n            onSuggestionSelected={ onSuggestionSelected }\n            inputProps={ {\n              valid: Boolean(formData[registrationMode].company.length && validation.existingCompany?.company),\n              invalid: Boolean(formData[registrationMode].company.length && !validation.existingCompany?.company),\n              autoComplete: 'off',\n              name: 'company',\n              type: 'text',\n              id: 'company',\n              placeholder: t('companyName'),\n              value: formData[registrationMode].company || '',\n              onChange\n            } }\n          />\n        </div>\n        <div className=\"px-0 mx-md-4 col-12 col-md-3\">\n          <CFormFloating>\n            <CFormControl\n              autoComplete=\"off\"\n              value={ formData[registrationMode].email || '' }\n              valid={ formData.existingCompany?.email && validation.existingCompany?.email }\n              invalid={ formData.existingCompany?.email && !validation.existingCompany?.email }\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              placeholder={ t('email') }\n              onChange={ onChange }\n            />\n            {\n              Boolean(formData.existingCompany?.email && !validation.existingCompany?.email) &&\n              <CFormText className=\"text-danger\">{t('landing.registration.errorEmailText')}</CFormText>\n            }\n            <CFormLabel htmlFor=\"email\">{ t('email') }</CFormLabel>\n          </CFormFloating>\n        </div>\n      </CRow>\n      <CRow className=\"mt-3\">\n        <div className=\"px-0 col-12 col-md-3\">\n          <CFormFloating>\n            <CFormControl\n              type=\"text\"\n              id=\"lastName\"\n              name=\"lastName\"\n              value={ formData[registrationMode].lastName || '' }\n              onChange={ onChange }\n              placeholder={ t('lastName') }\n            />\n            <CFormLabel htmlFor=\"lastName\">{ t('lastName') }</CFormLabel>\n          </CFormFloating>\n        </div>\n        <div className=\"px-0 mx-md-4 col-12 col-md-3\">\n          <CFormFloating>\n            <CFormControl\n              value={ formData[registrationMode].firstName || '' }\n              type=\"text\"\n              id=\"firstName\"\n              name=\"firstName\"\n              onChange={ onChange }\n              placeholder={ t('firstName') }\n            />\n            <CFormLabel htmlFor=\"firstName\">{ t('firstName') }</CFormLabel>\n          </CFormFloating>\n        </div>\n        <div className=\"px-0 mb-3 mb-md-0 col-12 col-md-3\">\n          <CFormFloating>\n            <CFormControl\n              value={ formData[registrationMode].middleName || '' }\n              type=\"text\"\n              id=\"middleName\"\n              name=\"middleName\"\n              onChange={ onChange }\n              placeholder={ t('middleName') }\n            />\n            <CFormLabel htmlFor=\"middleName\">{ t('middleName') }</CFormLabel>\n          </CFormFloating>\n        </div>\n      </CRow>\n    </CRow>\n  )\n  const renderLoading = () => (\n    <div className=\"d-flex min-vh-100 flex-column align-items-center justify-content-center col-lg-8 mx-auto\">\n      { !isRegistrationCompleted\n        ? (\n          <div className=\"d-flex justify-content-center intermittent spinner-border text-primary\"\n               style={ { width: '5em', height: '5em' } }\n               role=\"status\"> {/* TODO сделать новый класс для спиннера, а  не переопределять этот в custom.scss*/ }\n            <span className=\"sr-only\"/>\n          </div>)\n        : (<div className=\"completedRegistration\" style={ { width: '5em', height: '5em' } }/>) }\n      <h1\n        className=\"mt-5 text-center\">{ t(`register.${ registrationMode }.loading.${ isRegistrationCompleted ? 'success' : 'pending' }`) }</h1>\n      { (existingCompanyRegistrationMode && isRegistrationCompleted) &&\n      <p className=\"text-center font-size-lg\">{ t('register.existingCompany.loading.description') }</p> }\n    </div>\n  )\n  const initialRegistrationMode = registrationMode === 'initial'\n  const newAccountRegistrationMode = registrationMode === 'newAccount'\n  const existingCompanyRegistrationMode = registrationMode === 'existingCompany'\n  const renderContent = () => (\n    <CCol className={ classnames({ 'd-flex flex-column justify-content-between': !initialRegistrationMode }) }>\n      <CRow>\n        <h1>{ setHeading() }</h1>\n        <CCol lg={ 8 }>\n          <p>{ setDescription() }</p>\n        </CCol>\n      </CRow>\n      { !initialRegistrationMode &&\n      <CRow className=\"mx-0 mb-3 flex-md-grow-1\">\n        <CForm className=\"row flex-column justify-content-between\">\n          { newAccountRegistrationMode && renderNewAccountModeInputs() }\n          { existingCompanyRegistrationMode && renderExistingCompanyRegistrationModeInputs() }\n          { !initialRegistrationMode &&\n          <CFormCheck\n            id=\"checkbox\"\n            name=\"checkedAgreement\"\n            value=\"\"\n            checked={ formData[registrationMode].checkedAgreement }\n            onChange={ onChange }\n            label={\n              <Trans\n                // i18nKey=\"register.privacyPolicy\" // TODO разобраться как правильно юзать\n                defaults=\"Я согласен с <l href='{{conditions}}'>условиями</l> и <l href='{{privacyPolicy}}'>политикой конфиденциальности</l>\" // optional defaultValue\n                values={ { conditions: '/conditions', privacyPolicy: '/privacy-policy' } }\n                components={ { l: <CLink target=\"_blank\" rel=\"noopener noreferrer\"/> } }\n              /> }\n          /> }\n        </CForm>\n      </CRow> }\n      <div\n        className={ classnames('mt-5 mt-md-0 d-flex flex-wrap', { 'mt-5 flex-column align-items-start': initialRegistrationMode }) }>\n        <CButton\n          key={ uuidv4() }\n          className={ classnames('text-white btn-lg col-12', {\n            'mb-3 col-md-4': initialRegistrationMode,\n            'mb-3 mb-md-0 col-md-3': !initialRegistrationMode\n          }) }\n          color=\"primary\"\n          block=\"true\"\n          disabled={ !initialRegistrationMode && (!validation.isValid || isEmpty(formData[registrationMode]) || !formData[registrationMode].checkedAgreement) }\n          data-registration-mode=\"newAccount\"\n          onClick={ initialRegistrationMode ? setRegistrationMode : sendRequest }\n        >\n          { setPrimaryButtonContent() }\n        </CButton>\n        <CButton\n          key={ uuidv4() }\n          className={ classnames('btn-lg col-12', {\n            'mx-md-3 col-md-3': !initialRegistrationMode,\n            'col-md-6': initialRegistrationMode\n          }) }\n          color=\"primary\"\n          variant=\"outline\"\n          block=\"true\"\n          data-registration-mode=\"existingCompany\"\n          onClick={ initialRegistrationMode ? setRegistrationMode : goBack }\n        >\n          { setSecondaryButtonContent() }\n        </CButton>\n      </div>\n    </CCol>\n  )\n\n  return (\n    <CContainer className=\"min-vh-100 d-flex flex-column pb-4 pt-5\">\n      { isLoading && renderLoading() }\n      { !isLoading && renderContent() }\n      { initialRegistrationMode && <CButton\n        key={ uuidv4() }\n        className=\"btn-lg col-12 col-md-3 mt-5 mt-md-0\"\n        color=\"primary\"\n        variant=\"outline\"\n        onClick={ () => history.goBack() }\n      >\n        { t('goBack') }\n      </CButton> }\n      <CToaster ref={ toaster } push={ toast } placement=\"top-end\"/>\n    </CContainer>\n  )\n}\n\nexport default RegisterView\n","import React, { useState, useRef, useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport {\n  CToast,\n  CToastBody,\n  CToastHeader\n} from '@coreui/react'\nimport RegisterView from './RegisterView'\nimport { connect, useDispatch } from 'react-redux'\nimport { register } from 'src/store'\nimport { registerNewBusinessCompany, linkUserToExistingCompany, getAllCompanies } from 'src/services'\nimport { useTranslation } from 'react-i18next'\nimport { Helmet } from 'react-helmet'\n\nconst INITIAL_FORM_DATA = {\n  newAccount: {\n    email: '',\n    company: '',\n    checkedAgreement: false\n  },\n  existingCompany: {\n    company: '',\n    firstName: '',\n    lastName: '',\n    middleName: '',\n    checkedAgreement: false\n  }\n}\nconst INITIAL_VALIDATION_STATE = {\n  isValid: false,\n  newAccount: {},\n  existingCompany: {}\n}\nconst DELAY_TIME = 3500\nconst RegisterContainer = ({ isLoggedIn, ...rest }) => {\n  const { t } = useTranslation()\n  const [companiesList, setCompaniesList] = useState([])\n  const [suggestionsList, setSuggestionsList] = useState([])\n  const [isRegistrationCompleted, setCompletedRegistration] = useState(false)\n  const [validation, setValidation] = useState(INITIAL_VALIDATION_STATE)\n  const [isLoading, setLoading] = useState(false)\n  const [toast, addToast] = useState(0)\n  const toaster = useRef()\n  const [registrationMode, toggleRegistrationMode] = useState('initial')\n  const [formData, setFormData] = useState(INITIAL_FORM_DATA)\n  const dispatch = useDispatch()\n  useEffect(async () => {\n    if (registrationMode === 'existingCompany') {\n      const companies = await getAllCompanies() //TODO если запрос не прошел или получен пустой список, дизейблить инпут, во время загрузки лоадер внутри\n      setCompaniesList([...companies])\n    }\n  }, [registrationMode])\n  const setRegistrationMode = ({ target: { dataset } }) => {\n    const { registrationMode } = dataset\n\n    toggleRegistrationMode(registrationMode)\n  }\n  const sendRequest = () => {\n    return registrationMode === 'newAccount'\n      ? registerNewBusinessCompanyHandler()\n      : connectToExistingCompanyHandler()\n  }\n  const connectToExistingCompanyHandler = async () => {\n    const requestData = {\n      ...formData,\n      [registrationMode]: {\n        ...formData[registrationMode],\n        companyId: companiesList.filter(company => company.name === formData[registrationMode].company)[0].id\n      }\n    }\n    delete requestData[registrationMode].checkedAgreement\n    delete requestData[registrationMode].company\n\n    try {\n      setLoading(true)\n      const { token, message } = await linkUserToExistingCompany(requestData[registrationMode])\n      if (message) {\n        setLoading(false)\n        addToast(() => showErrorToast(message))\n      }\n      if (!message || token) setCompletedRegistration(true)\n    } catch (error) {\n      setLoading(false)\n      addToast(() => showErrorToast())\n    }\n  }\n  const registerNewBusinessCompanyHandler = async () => {\n    const requestData = {\n      ...formData,\n      [registrationMode]: {\n        ...formData[registrationMode]\n      }\n    }\n    delete requestData[registrationMode].checkedAgreement\n    try {\n      setLoading(true)\n      const res = await registerNewBusinessCompany(requestData[registrationMode])\n      if (res?.token) {\n        setCompletedRegistration(true)\n        setTimeout(() => {\n          setLoading(false)\n          dispatch(register(res.token))\n        }, DELAY_TIME)\n      }\n\n      if (res.message) {\n        setLoading(false)\n        addToast(() => showErrorToast(res.message))\n      }\n    } catch (error) {\n      console.log(error)\n      setLoading(false)\n      addToast(() => showErrorToast())\n    }\n  }\n  const validateForm = (name, value, checked) => {\n    if (name === 'email') {\n      const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      const isEmailValid = re.test(String(value).toLowerCase())\n      if (isEmailValid) {\n        setValidation({\n          ...validation,\n          isValid: true,\n          [registrationMode]: {\n            ...validation[registrationMode],\n            email: true\n          }\n        })\n      } else {\n        setValidation({\n          ...validation,\n          isValid: false,\n          [registrationMode]: {\n            ...validation[registrationMode],\n            email: false\n          }\n        })\n      }\n    } else if (registrationMode === 'existingCompany' && name === 'company') {\n      if (companiesList.filter(company => company.name === (value.trim() || formData[registrationMode].company)).length) {\n        setValidation({\n          ...validation,\n          isValid: true,\n          [registrationMode]: {\n            ...validation[registrationMode],\n            company: true\n          },\n        })\n      } else {\n        setValidation({\n          ...validation,\n          isValid: false,\n          [registrationMode]: {\n            ...validation[registrationMode],\n            company: false\n          },\n        })\n      }\n    } else if ((value.trim() || checked) && (validation[registrationMode]?.email || validation[registrationMode]?.company)) {\n      setValidation({\n        ...validation,\n        isValid: true,\n        [registrationMode]: {\n          ...validation[registrationMode]\n        }\n      })\n    } else {\n      setValidation({\n        ...validation,\n        isValid: false,\n        [registrationMode]: {\n          ...validation[registrationMode]\n        }\n      })\n    }\n  }\n  const getSuggestionValue = suggestion => suggestion.name;\n  const getSuggestions = (value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength === 0 ? [] : companiesList.filter(company =>\n      company.name.toLowerCase().slice(0, inputLength) === inputValue\n    );\n  }\n  const onSuggestionSelected = (event, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) => {\n    setFormData({\n      ...formData,\n      [registrationMode]: {\n        ...formData[registrationMode],\n        companyId: suggestion.id,\n        company: suggestionValue\n      }\n    })\n    validateForm('company', suggestionValue)\n    setSuggestionsList([])\n  }\n  const onSuggestionsFetchRequested = ({ value }) => {\n    setSuggestionsList(getSuggestions(value))\n  }\n  const onChange = ({ target: { name, value, checked } }) => {\n    setFormData({\n      ...formData,\n      [registrationMode]: {\n        ...formData[registrationMode],\n        [name]: value || checked\n      }\n    })\n    if (name && value) validateForm(name, value, checked)\n  }\n  const goBack = () => {\n    setFormData(INITIAL_FORM_DATA)\n    setValidation(INITIAL_VALIDATION_STATE)\n    toggleRegistrationMode('initial')\n  }\n  const showErrorToast = (message = '') => (\n    <CToast title={ t('defaultErrorTitle') } autohide={ true }>\n      <CToastHeader close>\n        <svg\n          className=\"rounded me-2\"\n          width=\"20\"\n          height=\"20\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          preserveAspectRatio=\"xMidYMid slice\"\n          focusable=\"false\"\n          role=\"img\"\n        >\n          <rect width=\"100%\" height=\"100%\" fill=\"#EB5757\"></rect>\n        </svg>\n        <strong className=\"me-auto\">{ t('defaultErrorTitle') }</strong>\n      </CToastHeader>\n      <CToastBody>{ message || t('default400Error') }</CToastBody>\n    </CToast>\n  )\n  const propsData = {\n    ...rest,\n    registrationMode,\n    isRegistrationCompleted,\n    onSuggestionSelected,\n    getSuggestionValue,\n    onSuggestionsFetchRequested,\n    suggestions: suggestionsList,\n    companiesList,\n    setRegistrationMode,\n    formData,\n    onChange,\n    sendRequest,\n    goBack,\n    validation,\n    isLoading,\n    toaster,\n    toast,\n  }\n  return (\n    <>\n      <Helmet>\n        <title>Создать бесплатный аккаунт юридического лица</title>\n        <meta name=\"description\"\n              content=\"Создайте новый бизнес-аккаунт или присоединитесь к существующей компании. Быстро, надежно и совершенно бесплатно!\"/>\n      </Helmet>\n      <RegisterView { ...propsData } />\n      { (isLoggedIn && registrationMode !== 'existingCompany') && <Redirect to=\"/dashboard\"/> }\n    </>\n  )\n}\n\nconst mapStateToProps = ({ isLoggedIn }) => ({\n  isLoggedIn\n})\n\nexport default connect(mapStateToProps)(RegisterContainer)\n","import RegisterContainer from './RegisterContainer'\n\nexport default RegisterContainer\n"],"sourceRoot":""}